# -*- coding: utf-8 -*-
from flask import Flask, request
from flask_sslify import SSLify

import telebot
import config
import dbworker
import json

app = Flask(__name__)
sslify = SSLify(app)
time_json = config.time_f_directiry

bot = telebot.TeleBot(config.token, threaded=False)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
markup_day = telebot.types.InlineKeyboardMarkup(row_width=1)
btn_in_mon = telebot.types.InlineKeyboardButton('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data='Monday')
btn_in_tues = telebot.types.InlineKeyboardButton('–í—Ç–æ—Ä–Ω–∏–∫', callback_data='Tuesday')
btn_in_wed = telebot.types.InlineKeyboardButton('–°—Ä–µ–¥–∞', callback_data='Wednesday')
btn_in_th = telebot.types.InlineKeyboardButton('–ß–µ—Ç–≤–µ—Ä–≥', callback_data='Thursday')
btn_in_fri = telebot.types.InlineKeyboardButton('–ü—è—Ç–Ω–∏—Ü–∞', callback_data='Friday')
btn_in_sat = telebot.types.InlineKeyboardButton('–°—É–±–±–æ—Ç–∞', callback_data='Saturday')
btn_in_sun = telebot.types.InlineKeyboardButton('–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', callback_data='Sunday')
markup_day.add(btn_in_mon, btn_in_tues, btn_in_wed, btn_in_th, btn_in_fri, btn_in_sat, btn_in_sun)

@bot.message_handler(commands=['help'])
def process_help_command(message):
    bot.send_message(message.chat.id, config.help_message)

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
@bot.message_handler(commands=["start"])
def cmd_start(message):
    state = dbworker.get_current_state(message.chat.id)

    if state == config.States.S_ENTER_DAY.value:
        bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", reply_markup=markup_day)

    elif state == config.States.S_ENTER_TIME.value:
        bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è –º–∞—Å—Å–∞–∂–∞")
    
    elif state == config.States.S_ENTER_NAME.value:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å–≤–æ–µ –ò–º—è")

    elif state == config.States.S_ENTER_PHONE.value:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

    else:  # –ü–æ–¥ "–æ—Å—Ç–∞–ª—å–Ω—ã–º" –ø–æ–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "0" - –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
        bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üôè \n –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Å—Å–∞–∂.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", reply_markup=markup_day)

# –ü–æ –∫–æ–º–∞–Ω–¥–µ /reset –±—É–¥–µ–º —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—è—Å—å –∫ –Ω–∞—á–∞–ª—É –¥–∏–∞–ª–æ–≥–∞
@bot.message_handler(commands=["reset"])
def cmd_reset(message):
    # print(message.chat.id)
    bot.send_message(message.chat.id, "–ß—Ç–æ –∂, –Ω–∞—á–Ω—ë–º –ø–æ-–Ω–æ–≤–æ–π. \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.", reply_markup=markup_day)
    dbworker.set_state(message.chat.id, config.States.S_ENTER_DAY.value)


# –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 
@bot.message_handler(commands=["admin"])
def cmd_admin(message):
    if message.chat.id == config.admin:
        bot.send_message(message.chat.id, "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üôè  \n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞—Å—Å–∞–∂", reply_markup=markup_day)
    else:
        bot.send_message(message.chat.id, "–í—ã –ù–ï –∞–¥–º–∏–Ω!!!")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
@bot.callback_query_handler(func=lambda call: call.data == 'Monday' or call.data == 'Tuesday' or call.data == 'Wednesday' 
                                            or call.data == 'Thursday' or call.data == 'Friday' or call.data == 'Saturday' 
                                            or call.data == 'Sunday')
def callback_day(call):
    # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if call.message.chat.id == config.admin:
        
        with open(time_json, 'r', encoding='utf-8') as f: #–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —á—Ç–µ–Ω–∏–µ
            data_f = json.load(f) #–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å data
            bot.send_message(call.message.chat.id, "‚Ñπ –°–µ–∞–Ω—Å—ã –º–∞—Å—Å–∞–∂–∞ –Ω–∞ " + call.data + '‚Ñπ')
            for i in data_f[call.data].items():
                markup_time_edit = telebot.types.InlineKeyboardMarkup()
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ
                if str(i[1]) == 'False':
                    btn1 = telebot.types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å', callback_data=str(call.data+';'+i[0]+';'+'True'))
                    markup_time_edit.add(btn1)
                    bot.send_message(call.message.chat.id, "–ù–∞ " + i[0] +" –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ ‚õî ", reply_markup=markup_time_edit)
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å–≤–æ–±–æ–¥–Ω–æ
                else:
                    btn1 = telebot.types.InlineKeyboardButton('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', callback_data=str(call.data+';'+i[0]+';'+'False'))
                    markup_time_edit.add(btn1)
                    bot.send_message(call.message.chat.id, "–ù–∞ " + i[0] +" –°–≤–æ–±–æ–¥–Ω–æ ‚úÖ ", reply_markup=markup_time_edit)
                    
    # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–µ–∞–Ω—Å
    else:
        markup_time = telebot.types.InlineKeyboardMarkup(row_width=1)

        with open(time_json, 'r', encoding='utf-8') as f: #–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —á—Ç–µ–Ω–∏–µ
            data_f = json.load(f) #–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å data
            for i in data_f[call.data].items():
                if str(i[1]) == 'True':
                    btn1 = telebot.types.InlineKeyboardButton(str(i[0]), callback_data=str(call.data+';'+i[0]))
                    markup_time.add(btn1)
                else:
                    continue
        bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ üëç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤—ã–±—Ä–∞–Ω! \n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è!", reply_markup=markup_time)
        dbworker.set_state(call.message.chat.id, config.States.S_ENTER_TIME.value)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–∞–Ω—Å–∞
@bot.callback_query_handler(func=lambda call: call.data != 'Monday' or call.data != 'Tuesday' or call.data != 'Wednesday' 
                                            or call.data != 'Thursday' or call.data != 'Friday' or call.data != 'Saturday' 
                                            or call.data != 'Sunday')
def callback_time(call):
    day_time = call.data.split(';')

    if call.message.chat.id == config.admin:
         with open(time_json, 'r', encoding='utf-8') as f: #–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —á—Ç–µ–Ω–∏–µ
            data_f = json.load(f) #–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å data
            for i in data_f[str(day_time[0])].items():
                if day_time[1] == i[0]:
                    data_f[str(day_time[0])][i[0]] = str(day_time[2])
                    with open(time_json, "w",encoding="utf-8") as fl:
                        json.dump(data_f, fl)
                    if str(day_time[2]) == 'True':
                        bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ üëç  –±—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    else:
                        bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ üëç  –≤—Ä–µ–º—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ")
                else:
                    continue

    else:
        with open(time_json, 'r', encoding='utf-8') as f: #–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —á—Ç–µ–Ω–∏–µ
            data_f = json.load(f) #–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å data
            for i in data_f[str(day_time[0])].items():
                if day_time[1] == i[0]:
                    data_f[str(day_time[0])][i[0]] = 'False'
                    with open(time_json, "w",encoding="utf-8") as fl:
                        json.dump(data_f, fl)
                else:
                    continue
        bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ üëç –≤—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ! \n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è")
        dbworker.set_state(call.message.chat.id, config.States.S_ENTER_NAME.value)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_ENTER_NAME.value)
def user_entering_name(message):
    
    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ –∏–º—è, –∑–∞–ø–æ–º–Ω—é! üëå \n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    dbworker.set_state(message.chat.id, config.States.S_ENTER_PHONE.value)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_ENTER_PHONE.value)
def user_entering_age(message):
    # –ê –≤–æ—Ç —Ç—É—Ç —Å–¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if not message.text.isdigit():
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ–º, –ø–æ—ç—Ç–æ–º—É —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –∂–¥—ë–º –¥–∞–ª—å—à–µ
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
        return
    else:
        # –í–æ–∑—Ä–∞—Å—Ç –≤–≤–µ–¥—ë–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –º–æ–∂–Ω–æ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ
        bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —Å–µ–±–µ —Å–µ–∞–Ω—Å –º–∞—Å—Å–∞–∂–∞! ü§ù")
        dbworker.set_state(message.chat.id, config.States.S_START.value)


@app.route('/', methods=["POST"])
def index():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return '<h1> –ë–æ—Ç –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞, –∫–æ—Ç–æ—ã—Ä–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç </h1>'


if __name__ == '__main__':
    app.run()
    # bot.remove_webhook()
    # bot.polling(none_stop=True, interval=0)